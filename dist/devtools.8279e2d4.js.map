{"version":3,"sources":["js/lib/API.ts","js/lib/EVENT.ts","js/devtools.ts"],"names":[],"mappings":"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","file":"devtools.8279e2d4.js","sourceRoot":"..\\src","sourcesContent":["export const PAGES = {\r\n\tCONTENT: \"content-page\",\r\n\tDEVTOOL: \"devtools-page\",\r\n};\r\n\r\nexport interface IMessage {\r\n\ttarget: string;\r\n\tsender: string;\r\n\ttype: string;\r\n\terror: any;\r\n\tid: number;\r\n\tanswer?: (data: any) => void;\r\n}\r\n\r\nexport class APIServer {\r\n\tprotected _bus: chrome.runtime.Port = undefined;\r\n\tprotected _pool: {[key: string]: any} = {};\r\n\tprotected _flow: {[key: string]: (mess: IMessage) => void} = {};\r\n\tprotected _messageID: number = 0;\r\n\r\n\tconstructor(public name = '') {\r\n\t\tthis._onMessage = this._onMessage.bind(this);\r\n\t}\r\n\t\r\n\tconnect(tabId = undefined) {\r\n\t\tif (this._bus) {\r\n\t\t\tthis._bus.disconnect();\r\n\t\t}\r\n\r\n\t\tif (!tabId) {\r\n\t\t\tthis._bus = chrome.runtime.connect({ name: this.name});\r\n\t\t} else {\r\n\t\t\tthis._bus = chrome.tabs.connect(tabId, { name: this.name });\r\n\t\t}\r\n\r\n\t\tthis._bus.onMessage.addListener(this._onMessage.bind(this));\r\n\t}\r\n\r\n\tclose() {\r\n\t\tthis._bus && this._bus.disconnect();\r\n\t\tthis._bus = undefined;\r\n\t}\r\n\r\n\tget opened() {\r\n\t\treturn !!this._bus;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {IMessage} data\r\n\t * @returns {{answer: Function}}\r\n\t */\r\n\t_answerFlow(data: IMessage) {\r\n\t\tdata.answer = (_newData = {}) => {\r\n\t\t\t_newData.type = data.type;\r\n\t\t\t_newData.id = data.id;\r\n\t\t\t_newData.target = data.sender;\r\n\t\t\tthis._bus.postMessage(_newData);\r\n\t\t};\r\n\t\treturn data;\r\n\t}\r\n\r\n\t_onMessage(data: IMessage) {\r\n\r\n\t\t// console.debug(\"API\", this.name, data);\r\n\r\n\t\tconst resolver = data.id !== undefined ? this._pool[data.id] : undefined;\r\n\r\n\t\tif (!resolver) {\r\n\t\t\tif (this._flow[data.type]) {\r\n\t\t\t\tthis._flow[data.type](this._answerFlow(data));\r\n\r\n\t\t\t\t// console.debug(\"CAll flow\", data.type);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(\"message resolve not found\", data.id, data.type);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._pool[data.id] = undefined;\r\n\t\t\tif (data.error) {\r\n\t\t\t\tresolver.reject(data.error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tresolver.resolve(data);\r\n\t\t}\r\n\t}\r\n\r\n\tonFlow(type: string, callback: (data: IMessage & any) => void) {\r\n\t\tthis._flow[type] = callback;\r\n\t}\r\n\r\n\toffFlow(type: string) {\r\n\t\tthis._flow[type] = undefined;\r\n\t}\r\n\r\n\r\n\tasync send(type: string, data: any, timeout = 0): Promise<IMessage & any> {\r\n\t\tif (!this._bus) {\r\n\t\t\tthrow new Error(\"Connection not opened!\");\r\n\t\t}\r\n\r\n\t\tdata.type = type;\r\n\t\tdata.id = data.id || this._messageID++;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._pool[data.id] = {\r\n\t\t\t\tid: data.id,\r\n\t\t\t\tresolve,\r\n\t\t\t\treject,\r\n\t\t\t};\r\n\r\n\t\t\tif(timeout > 0) {\r\n\t\t\t\tsetTimeout(()=>{\r\n\t\t\t\t\treject(\"API call rejected by timeout\")\r\n\t\t\t\t}, timeout);\r\n\t\t\t}\r\n\r\n\t\t\tthis._bus.postMessage(data);\r\n\t\t});\r\n\t}\r\n}\r\n","export const enum EVENT {\r\n\tINJECT = 'inject',\r\n\tDETACH = 'detach',\r\n\tTEST = 'test',\r\n\tINFO = 'info',\r\n\tLOG_BLOB = 'log',\r\n\tLOG_INIT = 'log-init',\r\n\tLOG_STOP = 'log-stop',\r\n\tCALL = 'call',\r\n\tTRACK_BOUNDS = 'track-bounds'\r\n};\r\n","//@ts-check\r\n\r\nimport { APIServer, PAGES } from \"./lib/API\";\r\nimport { EVENT } from \"./lib/EVENT\";\r\n\r\nconst api = new APIServer(PAGES.DEVTOOL);\r\n\r\nlet contex: IPanelAPI = undefined;\r\nlet isCapture: boolean = false;\r\nlet pingTimeout: any = undefined;\r\nlet isAttached: boolean = false;\r\nlet currentTab: number = -1;\r\n\r\nasync function injectPageApi(): Promise<any> {\r\n\tcurrentTab = chrome.devtools.inspectedWindow.tabId;\r\n\tconsole.log(\"CURRENT TAB\", currentTab);\r\n\r\n\tapi.connect(currentTab);\r\n\r\n\treturn true;\r\n\r\n\t/*\r\n\tconst testPage = await new Promise((res)=>{\r\n\t\tchrome.tabs.executeScript(currentTab, {\r\n\t\t\tcode: `window.__AWAY__PAGE__API`\r\n\t\t}, (result)=>{\r\n\t\t\tconsole.debug(\"Test page of field\", result);\r\n\t\t\t\r\n\t\t\tres(result[0]);\r\n\t\t})\r\n\t})\r\n\r\n\tif(testPage) {\r\n\t\tconsole.debug(\"Connect to existed page\");\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tconsole.debug(\"Execute new instance\");\r\n\r\n\treturn new Promise((res) => {\r\n\t\tchrome.tabs.executeScript(\r\n\t\t\tcurrentTab,\r\n\t\t\t{ file: \"js/content.js\" },\r\n\t\t\tres\r\n\t\t);\r\n\t});*/\r\n}\r\n\r\nasync function getStatus(timeout = 0): Promise<boolean> {\r\n\treturn api.send(EVENT.TEST, {}, timeout).then((e) => {\r\n\t\treturn e.status;\r\n\t});\r\n}\r\n\r\nlet _logsCallback = undefined;\r\n\r\nfunction serverIsDetached() {\r\n\tclearInterval(pingTimeout);\r\n\r\n\tisCapture = false;\r\n\tisAttached = false;\r\n\tcontex && contex.detach(true);\r\n\r\n\tconsole.debug(\"AWAY DEV server is detached!\");\r\n}\r\n\r\nlet runned = false;\r\n\r\nfunction startPingout() {\r\n\tpingTimeout = setTimeout(() => {\r\n\t\tserverIsDetached();\r\n\t}, 1000);\r\n\r\n\tgetStatus().then((status) => {\r\n\t\tclearInterval(pingTimeout);\r\n\r\n\t\tif (!status) {\r\n\t\t\tserverIsDetached();\r\n\t\t} else {\r\n\t\t\tpingTimeout = setTimeout(() => {\r\n\t\t\t\tstartPingout();\r\n\t\t\t}, 1000);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction _onBlobReached(data: { blob: string[]; answer: Function }) {\r\n\tif (_logsCallback) {\r\n\t\t// пинаем, что не зависили!\r\n\t\tdata.answer({});\r\n\t\t_logsCallback(data.blob);\r\n\t}\r\n}\r\n\r\nfunction startCaptureLogs({ type, limit = 500000 }, callback) {\r\n\t_logsCallback = callback;\r\n\r\n\treturn api\r\n\t\t.send(EVENT.LOG_INIT, {\r\n\t\t\tlogType: type,\r\n\t\t\tlimit,\r\n\t\t\ttarget: PAGES.CONTENT,\r\n\t\t})\r\n\t\t.then(({ allow }) => {\r\n\t\t\tif (allow) {\r\n\t\t\t\tconsole.log(\"register blob flow\");\r\n\r\n\t\t\t\tapi.onFlow(EVENT.LOG_STOP, () => stopCaptureLogs(true));\r\n\t\t\t\tapi.onFlow(EVENT.LOG_BLOB, _onBlobReached);\r\n\t\t\t}\r\n\t\t\tisCapture = allow;\r\n\r\n\t\t\treturn allow;\r\n\t\t});\r\n}\r\n\r\nfunction stopCaptureLogs(supress = false) {\r\n\tif (!isCapture) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tisCapture = false;\r\n\r\n\tconsole.debug(\"DEVTOOL\", \"STOP CAPTURE\");\r\n\r\n\tapi.offFlow(EVENT.LOG_BLOB);\r\n\r\n\tif (!supress) {\r\n\t\tapi.send(EVENT.LOG_STOP, { target: PAGES.CONTENT });\r\n\t}\r\n\r\n\tcontex.emit(EVENT.LOG_STOP, {});\r\n\t_logsCallback = undefined;\r\n}\r\n\r\nlet _connection = undefined;\r\n\r\nasync function _tryConnect(): Promise<boolean> {\r\n\tawait injectPageApi();\r\n\r\n\t//if(api.)api.connect(currentTab);\r\n\r\n\ttry {\r\n\t\tisAttached = await getStatus(300);\r\n\t} catch (e) {\r\n\t\tisAttached = false;\r\n\t}\r\n\r\n\tif (isAttached) {\r\n\t\tstartPingout();\r\n\t}\r\n\r\n\t_connection = undefined;\r\n\treturn isAttached;\r\n}\r\n\r\nasync function tryConnect(): Promise<boolean> {\r\n\tif (_connection) {\r\n\t\tconsole.log(\"Called runned connectio\");\r\n\t\treturn _connection;\r\n\t}\r\n\r\n\t_connection = _tryConnect();\r\n\r\n\tsetTimeout(() => {\r\n\t\t_connection = undefined;\r\n\t}, 1000);\r\n\r\n\treturn _connection;\r\n}\r\n\r\nasync function getAppInfo(): Promise<any> {\r\n\treturn directCall(\"getInfo\");\r\n}\r\n\r\nasync function directCall(method: string, args: any[] = []): Promise<any> {\r\n\tconsole.debug(\"CALL DIRECT\", method, args);\r\n\r\n\tif (!isAttached) {\r\n\t\t//try {\r\n\t\t//\tawait tryConnect();\r\n\t\t//} catch {\r\n\t\t\tthrow \"DevTool not attached to page!\";\r\n\t\t//}\r\n\t}\r\n\r\n\treturn api\r\n\t\t.send(EVENT.CALL, { method, args, target: PAGES.CONTENT })\r\n\t\t.then((e) => {\r\n\t\t\tif (e.error) {\r\n\t\t\t\tthrow e.error;\r\n\t\t\t}\r\n\r\n\t\t\treturn e.result;\r\n\t\t});\r\n}\r\n\r\n\r\nasync function trackBounds(method: string, args: any): Promise<any> {\r\n\tconsole.debug(\"CALL TRACK BOUNDS\", method, args);\r\n\r\n\tif (!isAttached) {\r\n\t\t//try {\r\n\t\t//\tawait tryConnect();\r\n\t\t//} catch {\r\n\t\t\tthrow \"DevTool not attached to page!\";\r\n\t\t//}\r\n\t}\r\n\r\n\treturn\tapi.send(EVENT.TRACK_BOUNDS, {method, args, target: PAGES.CONTENT}).then((e) => {\r\n\t\tif (e.error) {\r\n\t\t\tthrow e.error;\r\n\t\t}\r\n\r\n\t\treturn e.result;\r\n\t});\r\n}\r\n\r\nconst devApi: IDevToolAPI = {\r\n\tgetStatus,\r\n\tstartCaptureLogs,\r\n\tstopCaptureLogs,\r\n\ttryConnect,\r\n\tgetAppInfo,\r\n\tdirectCall,\r\n\t//\r\n\ttrackBounds,\r\n};\r\n\r\nfunction _onPanelShow(panelContext: Window) {\r\n\tsetTimeout(() => {\r\n\t\tapi.onFlow(\"unload\", serverIsDetached);\r\n\r\n\t\tcontex = panelContext.PANEL_API;\r\n\t\tcontex.init(devApi);\r\n\t}, 100);\r\n}\r\n\r\nfunction _onPanelHide() {\r\n\tserverIsDetached();\r\n\r\n\tapi.offFlow(\"unload\");\r\n\tapi.close();\r\n\r\n\tcontex = undefined;\r\n}\r\n\r\nchrome.devtools.panels.create(\r\n\t\"AwayFL\",\r\n\t\"gfx/icon16.png\",\r\n\t\"panel.html\",\r\n\t(panel) => {\r\n\t\tpanel.onShown.addListener(_onPanelShow);\r\n\t\tpanel.onHidden.addListener(_onPanelHide);\r\n\t}\r\n);\r\n"]}