{"version":3,"sources":["js/lib/API.js","js/background.js"],"names":["PAGES","CONTENT","DEVTOOL","APIServer","constructor","name","_bus","undefined","_pool","_flow","_messageId","connect","disconnect","chrome","runtime","onMessage","addListener","_onMessage","bind","close","_answerFlow","data","answer","_newData","type","id","target","sender","postMessage","resolver","error","reject","resolve","console","warn","onFlow","callback","offFlow","send","Error","Promise","_BUSSES","_injectRequestId","message","EVENT","INJECT","log","scriptToInject","tabs","executeScript","tabId","file","debug","port","onConnect","onDisconnect","removeListener"],"mappings":"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","file":"background.js","sourceRoot":"..\\src","sourcesContent":["export const PAGES = {\r\n\tCONTENT: 'content-page',\r\n\tDEVTOOL: 'devtools-page'\r\n}\r\n\r\nexport class APIServer {\r\n\tconstructor(name) {\r\n\t\tthis.name = name;\r\n\t\tthis._bus = undefined;\r\n\t\tthis._pool = {};\r\n\t\tthis._flow = {};\r\n\t\tthis._messageId = 0;\r\n\t}\r\n\r\n\tconnect() {\r\n\t\tif(this._bus) {\r\n\t\t\tthis._bus.disconnect();\r\n\t\t}\r\n\r\n\t\tthis._bus = chrome.runtime.connect({\r\n\t\t\tname: this.name,\r\n\t\t});\r\n\r\n\t\tthis._bus.onMessage.addListener(this._onMessage.bind(this));\r\n\t}\r\n\r\n\tclose() {\r\n\t\tthis._bus && this._bus.disconnect();\r\n\t\tthis._bus = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param {any} data\r\n\t * @returns {{answer: Function}} \r\n\t */\r\n\t_answerFlow(data) {\r\n\t\tdata.answer = (_newData = {}) =>{\r\n\t\t\t_newData.type = data.type;\r\n\t\t\t_newData.id = data.id;\r\n\t\t\t_newData.target = data.sender;\r\n\t\t\tthis._bus.postMessage(_newData);\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n\t\r\n\t_onMessage(data) {\r\n\t\tconst resolver = this._pool[data.id];\r\n\t\tthis._pool[data.id] = undefined;\r\n\r\n\t\tif (!resolver) {\r\n\t\t\tif (this._flow[data.type]) {\r\n\t\t\t\tthis._flow[data.type](this._answerFlow(data));\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(\"message resolve not found\", data.id, data.type);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (data.error) {\r\n\t\t\t\tresolver.reject(data.error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tresolver.resolve(data);\r\n\t\t}\r\n\t}\r\n\r\n\tonFlow(type, callback) {\r\n\t\tthis._flow[type] = callback;\r\n\t}\r\n\r\n\toffFlow(type) {\r\n\t\tthis._flow[type] = false;\r\n\t}\r\n\r\n\tasync send(type, data) {\r\n\t\tif (!this._bus) {\r\n\t\t\tthrow new Error(\"Connection not opened!\");\r\n\t\t}\r\n\r\n\t\tdata.type = type;\r\n\t\tdata.id = this._messageId++;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._pool[data.id] = {\r\n\t\t\t\tid: data.id,\r\n\t\t\t\tresolve,\r\n\t\t\t\treject,\r\n\t\t\t};\r\n\r\n\t\t\tthis._bus.postMessage(data);\r\n\t\t});\r\n\t}\r\n}\r\n","import { EVENT, PAGES } from \"./lib/API.js\";\r\n\r\nconst _BUSSES = {\r\n\t[PAGES.CONTENT]: {},\r\n\t[PAGES.DEVTOOL]: {},\r\n};\r\n\r\nlet _injectRequestId = 0;\r\n\r\n_BUSSES[PAGES.DEVTOOL].onMessage = function (message) {\r\n\tswitch (message.type) {\r\n\t\tcase EVENT.INJECT: {\r\n\t\t\tconsole.log(\"INJECT\", message.scriptToInject);\t\t\t\r\n\t\t\t_injectRequestId = message.id;\r\n\r\n\t\t\tchrome.tabs.executeScript(message.tabId, {\r\n\t\t\t\tfile: message.scriptToInject,\r\n\t\t\t});\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tconsole.debug(\"devtool -> background\", message);\r\n};\r\n\r\n_BUSSES[PAGES.CONTENT].onMessage = function (message) {\r\n\tif(message.type === EVENT.INJECT) {\r\n\t\tmessage.id = _injectRequestId;\r\n\t\t_BUSSES[PAGES.DEVTOOL].port.postMessage(message);\r\n\t\tconsole.debug(\"content -> devtool\", message);\r\n\t}\r\n\r\n\tconsole.debug(\"content -> background\", message);\r\n};\r\n\r\n// Background page -- background.js\r\nchrome.runtime.onConnect.addListener((port) => {\r\n\t_BUSSES[port.name].port = port;\r\n\r\n\tconst onMessage = (message, sender) => {\r\n\r\n\t\tif(message.target && _BUSSES[message.target]) {\r\n\t\t\tif(!_BUSSES[message.target].port) {\r\n\t\t\t\tconsole.warn('ATTEMTS send to closed port', message);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tmessage.sender = sender.name;\r\n\t\t\t\r\n\t\t\t_BUSSES[message.target].port.postMessage(message);\r\n\t\t\tconsole.debug('proxy message to', message.target, message);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t_BUSSES[sender.name].onMessage(message);\r\n\t};\r\n\r\n\t// add the listener\r\n\tport.onMessage.addListener(onMessage);\r\n\r\n\tport.onDisconnect.addListener(() => {\r\n\t\tport.onMessage.removeListener(onMessage);\r\n\t});\r\n});\r\n"]}