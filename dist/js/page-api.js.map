{"version":3,"sources":["js/lib/API.ts","js/lib/PageAPI.ts","js/lib/EVENT.ts","js/page-api.ts"],"names":[],"mappings":"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","file":"page-api.js","sourceRoot":"..\\src","sourcesContent":["export const PAGES = {\r\n\tCONTENT: \"content-page\",\r\n\tDEVTOOL: \"devtools-page\",\r\n};\r\n\r\nexport interface IMessage {\r\n\ttarget: string;\r\n\tsender: string;\r\n\ttype: string;\r\n\terror: any;\r\n\tid: number;\r\n\tanswer?: (data: any) => void;\r\n}\r\n\r\nexport class APIServer {\r\n\tprotected _bus: chrome.runtime.Port = undefined;\r\n\tprotected _pool: {[key: string]: any} = {};\r\n\tprotected _flow: {[key: string]: (mess: IMessage) => void} = {};\r\n\tprotected _messageID: number = 0;\r\n\r\n\tconstructor(public name = '') {\r\n\t\tthis._onMessage = this._onMessage.bind(this);\r\n\t}\r\n\t\r\n\tconnect(tabId = undefined) {\r\n\t\tif (this._bus) {\r\n\t\t\tthis._bus.disconnect();\r\n\t\t}\r\n\r\n\t\tif (!tabId) {\r\n\t\t\tthis._bus = chrome.runtime.connect({ name: this.name});\r\n\t\t} else {\r\n\t\t\tthis._bus = chrome.tabs.connect(tabId, { name: this.name });\r\n\t\t}\r\n\r\n\t\tthis._bus.onMessage.addListener(this._onMessage.bind(this));\r\n\t}\r\n\r\n\tclose() {\r\n\t\tthis._bus && this._bus.disconnect();\r\n\t\tthis._bus = undefined;\r\n\t}\r\n\r\n\tget opened() {\r\n\t\treturn !!this._bus;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {IMessage} data\r\n\t * @returns {{answer: Function}}\r\n\t */\r\n\t_answerFlow(data: IMessage) {\r\n\t\tdata.answer = (_newData = {}) => {\r\n\t\t\t_newData.type = data.type;\r\n\t\t\t_newData.id = data.id;\r\n\t\t\t_newData.target = data.sender;\r\n\t\t\tthis._bus.postMessage(_newData);\r\n\t\t};\r\n\t\treturn data;\r\n\t}\r\n\r\n\t_onMessage(data: IMessage) {\r\n\r\n\t\t// console.debug(\"API\", this.name, data);\r\n\r\n\t\tconst resolver = data.id !== undefined ? this._pool[data.id] : undefined;\r\n\r\n\t\tif (!resolver) {\r\n\t\t\tif (this._flow[data.type]) {\r\n\t\t\t\tthis._flow[data.type](this._answerFlow(data));\r\n\r\n\t\t\t\t// console.debug(\"CAll flow\", data.type);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(\"message resolve not found\", data.id, data.type);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._pool[data.id] = undefined;\r\n\t\t\tif (data.error) {\r\n\t\t\t\tresolver.reject(data.error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tresolver.resolve(data);\r\n\t\t}\r\n\t}\r\n\r\n\tonFlow(type: string, callback: (data: IMessage & any) => void) {\r\n\t\tthis._flow[type] = callback;\r\n\t}\r\n\r\n\toffFlow(type: string) {\r\n\t\tthis._flow[type] = undefined;\r\n\t}\r\n\r\n\r\n\tasync send(type: string, data: any, timeout = 0): Promise<IMessage & any> {\r\n\t\tif (!this._bus) {\r\n\t\t\tthrow new Error(\"Connection not opened!\");\r\n\t\t}\r\n\r\n\t\tdata.type = type;\r\n\t\tdata.id = data.id || this._messageID++;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._pool[data.id] = {\r\n\t\t\t\tid: data.id,\r\n\t\t\t\tresolve,\r\n\t\t\t\treject,\r\n\t\t\t};\r\n\r\n\t\t\tif(timeout > 0) {\r\n\t\t\t\tsetTimeout(()=>{\r\n\t\t\t\t\treject(\"API call rejected by timeout\")\r\n\t\t\t\t}, timeout);\r\n\t\t\t}\r\n\r\n\t\t\tthis._bus.postMessage(data);\r\n\t\t});\r\n\t}\r\n}\r\n","import {APIServer, IMessage} from \"./API\"\r\n\r\nexport const enum PAGE_MARKER {\r\n\tPROXY = \"_AWAY_API_event\",\r\n\tPAGE = \"_AWAY_PAGE_event\"\r\n}\r\n\r\ninterface IPageMessage extends IMessage {\r\n\tfrom: PAGE_MARKER;\r\n}\r\n\r\nexport class APIPage extends APIServer {\r\n\tconstructor() {\r\n\t\tsuper(\"page\");\r\n\t\tthis._bus = <any>{};\r\n\t\tthis.connect();\r\n\t}\r\n\r\n\tconnect() {\r\n\t\twindow.addEventListener(\"message\", this._onMessage);\r\n\t}\r\n\r\n\tclose() {\r\n\t\twindow.removeEventListener(\"message\", this._onMessage);\r\n\t}\r\n\r\n\t// @ts-ignore\r\n\t_onMessage(message: any) {\r\n\t\tif (message.data.from !== PAGE_MARKER.PROXY) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// console.debug(\"PAGE API\", message.data);\r\n\r\n\t\tsuper._onMessage(message.data);\r\n\t}\r\n\r\n\t_answerFlow(data: IPageMessage) {\r\n\t\tdata.answer = (_newData = {}) => {\r\n\t\t\t_newData.type = data.type;\r\n\t\t\t_newData.id = data.id;\r\n\t\t\t_newData.from = PAGE_MARKER.PAGE;\r\n\t\t\t_newData.target = data.sender;\r\n\t\t\twindow.postMessage(_newData, \"*\");\r\n\t\t};\r\n\t\treturn data;\r\n\t}\r\n\r\n\tasync send(type: string, data: any = {}): Promise<IPageMessage & any> {\r\n\t\tdata.type = type;\r\n\t\tdata.id = data.id || this._messageID++;\r\n\t\tdata.from = PAGE_MARKER.PAGE;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._pool[data.id] = {\r\n\t\t\t\tid: data.id,\r\n\t\t\t\tresolve,\r\n\t\t\t\treject,\r\n\t\t\t};\r\n\t\t\twindow.postMessage(data, \"*\");\r\n\t\t});\r\n\t}\r\n}","export const enum EVENT {\r\n\tINJECT = 'inject',\r\n\tDETACH = 'detach',\r\n\tTEST = 'test',\r\n\tINFO = 'info',\r\n\tLOG_BLOB = 'log',\r\n\tLOG_INIT = 'log-init',\r\n\tLOG_STOP = 'log-stop',\r\n\tCALL = 'call'\r\n};\r\n","import { APIPage } from \"./lib/PageAPI\";\r\nimport { EVENT } from \"./lib/EVENT\";\r\n\r\ndeclare global {\r\n\tinterface Window {\r\n\t\t_AWAY_DEBUG_: IAwayDebug;\r\n\t}\r\n}\r\n\r\n(function () {\r\n\r\n\tconsole.debug(\"PAGE API INJECTED\");\r\n\r\n\t// ---------------main -------------\r\n\tconst api = new APIPage();\r\n\r\n\tconst BATCH_BLOB_TIME = 500;\r\n\tconst BATCH_BLOBS = 1000;\r\n\tconst WAIT_TIMEOUT = 1000;\r\n\t/**\r\n\t * @type {IAwayDebug}\r\n\t */\r\n\tlet AWAY_DEBUG = undefined;\r\n\tlet _limit = 500000;\r\n\tlet _total = 0;\r\n\tlet _logBlob = [];\r\n\tlet _logBathedSender = undefined;\r\n\tlet _lastLoggedValue = undefined;\r\n\r\n\tfunction safeCall(method: string, args: any[]) {\r\n\t\tif (!AWAY_DEBUG) {\r\n\t\t\tthrow \"[AWAY DEBUG PAGE API] AWAY DEBUG interface not found!\";\r\n\t\t}\r\n\r\n\t\tif (typeof AWAY_DEBUG[method] !== \"function\") {\r\n\t\t\tthrow `[AWAY DEBUG PAGE API] field ${method} not callable!`;\r\n\t\t}\r\n\r\n\t\treturn AWAY_DEBUG[method].apply(undefined, args);\r\n\t}\r\n\r\n\tfunction _detachLogger(reason: string) {\r\n\t\tAWAY_DEBUG.registerWriter(0, null);\r\n\r\n\t\tclearTimeout(_logBathedSender);\r\n\r\n\t\tapi.send(EVENT.LOG_STOP, { target: \"devtools-page\", reason });\r\n\t}\r\n\r\n\tfunction _sendLog(blob: string[]) {\r\n\t\tif (!blob.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst waiter = setTimeout(() => {\r\n\t\t\t_detachLogger(\"timeout\");\r\n\t\t}, WAIT_TIMEOUT);\r\n\r\n\t\t// send blobs and wait, or stop sending!\r\n\t\tapi.send(EVENT.LOG_BLOB, {\r\n\t\t\tblob,\r\n\t\t\ttarget: \"devtools-page\",\r\n\t\t\ttotal: _total,\r\n\t\t}).then((e) => {\r\n\t\t\tclearTimeout(waiter);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction _logWriter(str: string) {\r\n\t\tif (str !== _lastLoggedValue) {\r\n\t\t\t_logBlob.push(str);\r\n\t\t\t_total++;\r\n\r\n\t\t\t_lastLoggedValue = str;\r\n\t\t}\r\n\r\n\t\tif (!_logBathedSender) {\r\n\t\t\t_logBathedSender = setTimeout(() => {\r\n\t\t\t\t_sendLog(_logBlob);\r\n\t\t\t\t_logBlob = [];\r\n\t\t\t\t_logBathedSender = undefined;\r\n\t\t\t}, BATCH_BLOB_TIME);\r\n\t\t}\r\n\r\n\t\tif (_logBlob.length >= BATCH_BLOBS) {\r\n\t\t\t_sendLog(_logBlob);\r\n\t\t\t_logBlob = [];\r\n\r\n\t\t\tclearTimeout(_logBathedSender);\r\n\t\t\t_logBathedSender = undefined;\r\n\t\t}\r\n\r\n\t\tif (_total > _limit) {\r\n\t\t\t_detachLogger(\"limit\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction logInit({ answer, logType, limit }) {\r\n\t\t_limit = limit;\r\n\t\t_total = 0;\r\n\r\n\t\tsafeCall(\"registerWriter\", [logType, _logWriter]);\r\n\r\n\t\tanswer({ allow: true });\r\n\t}\r\n\r\n\tfunction logStop() {\r\n\t\t_detachLogger(\"manual\");\r\n\t}\r\n\r\n\tfunction testOnDebug({ answer }) {\r\n\t\tif (!AWAY_DEBUG && window._AWAY_DEBUG_) {\r\n\t\t\tconsole.debug(\"AWAY_API attached\");\r\n\t\t}\r\n\r\n\t\tAWAY_DEBUG = window._AWAY_DEBUG_;\r\n\r\n\t\tanswer({ status: !!AWAY_DEBUG });\r\n\t}\r\n\r\n\tfunction directCall({ answer, method, args = [] }) {\r\n\t\ttry {\r\n\t\t\tconst data = safeCall(method, args);\r\n\r\n\t\t\tif (data && typeof data.then === \"function\") {\r\n\t\t\t\tdata.then((result) => {\r\n\t\t\t\t\tanswer({ result });\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tanswer({ result: data });\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tanswer({ error: e });\r\n\t\t}\r\n\t}\r\n\r\n\tapi.onFlow(EVENT.DETACH, function () {});\r\n\tapi.onFlow(EVENT.TEST, testOnDebug);\r\n\tapi.onFlow(EVENT.LOG_INIT, logInit);\r\n\tapi.onFlow(EVENT.LOG_STOP, logStop);\r\n\tapi.onFlow(EVENT.CALL, directCall);\r\n\r\n\t///\r\n})();\r\n"]}