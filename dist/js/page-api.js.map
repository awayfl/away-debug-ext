{"version":3,"sources":["js/lib/PageAPI.js","js/lib/EVENT.js","js/page-api.js"],"names":["APIServer","constructor","_pool","_messageId","_onMessage","bind","_flow","connect","window","addEventListener","close","removeEventListener","data","from","resolver","id","undefined","error","reject","resolve","type","_answerFlow","console","warn","onFlow","callback","offFlow","answer","_newData","target","sender","postMessage","send","Promise","EVENT","INJECT","DETACH","TEST","INFO","LOG_BLOB","LOG_INIT","LOG_STOP","CALL","api","AWAY_DEBUG","_limit","_total","_logBathedSender","safeCall","method","args","call","_detachLogger","reason","registerWriter","clearTimeout","testOnDebug","_AWAY_DEBUG_","debug","status","logInit","logType","limit","allow","logStop","directCall","then","result","e"],"mappings":"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","file":"page-api.js","sourceRoot":"..\\src","sourcesContent":["export class APIServer {\r\n\tconstructor() {\r\n\t\tthis._pool = {};\r\n\t\tthis._messageId = 0;\r\n\t\tthis._onMessage = this._onMessage.bind(this);\r\n\t\tthis._flow = {};\r\n\t\tthis.connect();\r\n\t}\r\n\r\n\tconnect() {\r\n\t\twindow.addEventListener(\"message\", this._onMessage);\r\n\t}\r\n\r\n\tclose() {\r\n\t\twindow.removeEventListener(\"message\", this._onMessage);\r\n\t}\r\n\r\n\t_onMessage({ data }) {\r\n\t\tif (data.from !== \"_AWAY_PROXY_event\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst resolver = this._pool[data.id];\r\n\t\tthis._pool[data.id] = undefined;\r\n\r\n\t\tif (!resolver) {\r\n\t\t\tif (this._flow[data.type]) {\r\n\t\t\t\tthis._flow[data.type](this._answerFlow(data));\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(\r\n\t\t\t\t\t\"message resolve not found\",\r\n\t\t\t\t\tdata.id,\r\n\t\t\t\t\tdata.type\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (data.error) {\r\n\t\t\t\tresolver.reject(data.error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tresolver.resolve(data);\r\n\t\t}\r\n\t}\r\n\r\n\tonFlow(type, callback) {\r\n\t\tthis._flow[type] = callback;\r\n\t}\r\n\r\n\toffFlow(type) {\r\n\t\tthis._flow[type] = false;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {any} data\r\n\t * @returns {{answer: Function}}\r\n\t */\r\n\t_answerFlow(data) {\r\n\t\tdata.answer = (_newData = {}) => {\r\n\t\t\t_newData.type = data.type;\r\n\t\t\t_newData.id = data.id;\r\n\t\t\t_newData.from = \"_AWAY_API_event\";\r\n\t\t\t_newData.target = data.sender;\r\n\t\t\twindow.postMessage(_newData, \"*\");\r\n\t\t};\r\n\t\treturn data;\r\n\t}\r\n\r\n\tasync send(type, data = {}) {\r\n\t\tdata.type = type;\r\n\t\tdata.id = data.id || this._messageId++;\r\n\t\tdata.from = \"_AWAY_API_event\";\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._pool[data.id] = {\r\n\t\t\t\tid: data.id,\r\n\t\t\t\tresolve,\r\n\t\t\t\treject,\r\n\t\t\t};\r\n\t\t\twindow.postMessage(data, \"*\");\r\n\t\t});\r\n\t}\r\n}","export const EVENT = {\r\n\tINJECT: 'inject',\r\n\tDETACH: 'detach',\r\n\tTEST: 'test',\r\n\tINFO: 'info',\r\n\tLOG_BLOB: 'log',\r\n\tLOG_INIT: 'log-init',\r\n\tLOG_STOP: 'log-stop',\r\n\tCALL: 'call'\r\n};\r\n","import {APIServer} from \"./lib/PageAPI\";\r\nimport {EVENT} from \"./lib/EVENT\";\r\n\r\n(function () {\r\n\t// ---------------main -------------\r\n\tconst api = new APIServer();\r\n\r\n\tconst BATCH_BLOB_TIME = 500;\r\n\tconst BATCH_BLOBS = 1000;\r\n\tconst WAIT_TIMEOUT = 1000;\r\n\t/**\r\n\t * @type {IAwayDebug}\r\n\t */\r\n\tlet AWAY_DEBUG = undefined;\r\n\tlet _limit = 500000;\r\n\tlet _total = 0;\r\n\tlet _logBlob = [];\r\n\tlet _logBathedSender = undefined;\r\n\tlet _lastLoggedValue = undefined;\r\n\r\n\tfunction safeCall(method, args) {\r\n\t\tif(!AWAY_DEBUG) {\r\n\t\t\tthrow \"[AWAY DEBUG PAGE API] AWAY DEBUG interface not found!\";\r\n\t\t}\r\n\r\n\t\tif(typeof AWAY_DEBUG[method] !== 'function') {\r\n\t\t\tthrow `[AWAY DEBUG PAGE API] field ${method} not callable!`;\r\n\t\t}\r\n\r\n\t\treturn AWAY_DEBUG[method].call(undefined, args);\r\n\t}\r\n\r\n\tfunction _detachLogger(reason) {\r\n\t\tAWAY_DEBUG.registerWriter(0, null);\r\n\r\n\t\tclearTimeout(_logBathedSender);\r\n\r\n\t\tapi.send(EVENT.LOG_STOP, { target: \"devtools-page\", reason });\r\n\t}\r\n\r\n\tfunction _sendLog(blob) {\r\n\t\tif(!blob.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst waiter = setTimeout(() => {\r\n\t\t\t_detachLogger(\"timeout\");\r\n\t\t}, WAIT_TIMEOUT);\r\n\t\t\r\n\t\t// send blobs and wait, or stop sending!\r\n\t\tapi.send(EVENT.LOG_BLOB, { blob, target: \"devtools-page\", total: _total }).then(\r\n\t\t\t(e) => {\r\n\t\t\t\tclearTimeout(waiter);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _logWriter(str) {\r\n\t\tif(str !== _lastLoggedValue){\r\n\t\t\t_logBlob.push(str);\r\n\t\t\t_total++;\r\n\r\n\t\t\t_lastLoggedValue = str;\r\n\t\t}\r\n\r\n\t\tif (!_logBathedSender) {\r\n\t\t\t_logBathedSender = setTimeout(() => {\r\n\t\t\t\t_sendLog(_logBlob);\r\n\t\t\t\t_logBlob = [];\r\n\t\t\t\t_logBathedSender = undefined;\r\n\t\t\t}, BATCH_BLOB_TIME);\r\n\t\t}\r\n\r\n\t\tif (_logBlob.length >= BATCH_BLOBS) {\r\n\t\t\t_sendLog(_logBlob);\r\n\t\t\t_logBlob = [];\r\n\r\n\t\t\tclearTimeout(_logBathedSender);\r\n\t\t\t_logBathedSender = undefined;\r\n\t\t}\r\n\r\n\t\tif (_total > _limit) {\r\n\t\t\t_detachLogger(\"limit\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction logInit({ answer, logType, limit }) {\r\n\t\t_limit = limit;\r\n\t\t_total = 0;\r\n\r\n\t\tsafeCall('registerWriter',logType, _logWriter);\r\n\r\n\t\tanswer({allow: true});\r\n\t}\r\n\r\n\tfunction logStop() {\r\n\t\t_detachLogger(\"manual\");\r\n\t}\r\n\r\n\tfunction testOnDebug({ answer }) {\r\n\t\tif(!AWAY_DEBUG && window._AWAY_DEBUG_){\r\n\t\t\tconsole.debug(\"AWAY_API attached\");\r\n\t\t}\r\n\r\n\t\tAWAY_DEBUG = window._AWAY_DEBUG_;\r\n\r\n\t\tanswer({ status: !!AWAY_DEBUG });\r\n\t}\r\n\r\n\tfunction directCall({answer, method, args = []}){\r\n\t\t\r\n\t\ttry{\r\n\t\t\tconst data = safeCall(method, args);\r\n\r\n\t\t\tif(data && typeof data.then === 'function') {\r\n\t\t\t\tdata.then((result)=>{\r\n\t\t\t\t\tanswer({result})\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tanswer({result: data});\r\n\t\t\t}\r\n\r\n\t\t} catch(e) {\r\n\t\t\tanswer({error: e});\r\n\t\t}\r\n\t}\r\n\r\n\tapi.onFlow(EVENT.DETACH, function(){});\r\n\tapi.onFlow(EVENT.TEST, testOnDebug);\r\n\tapi.onFlow(EVENT.LOG_INIT, logInit);\r\n\tapi.onFlow(EVENT.LOG_STOP, logStop);\r\n\tapi.onFlow(EVENT.CALL, directCall);\r\n\r\n\t///\r\n})();\r\n"]}